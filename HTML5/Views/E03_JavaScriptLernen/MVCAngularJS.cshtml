@{
    ViewBag.Title = "MVC mit AngularJS";
}

@*
    AngularJS verändert das Dom aktiv, um die Daten zwischen View und Model zu synchronisieren.
    Der Wirkungsbereich im Dom wird dabei über die AngularJS Direktive ng-app gesteuert:
    Alle Elemente unterhalb des Elements mit der Direktive ng-app unterliegen der Kontrolle von AngularJS
*@
<div ng-app="kombiniertesModul">

    <h2>MVCAngular</h2>
    <dl class="dl-horizontal">
        <dt><a href="https://angularjs.org">angularjs.org</a></dt>
        <dd>Offizielle Webseite zum Produkt</dd>
        <dt><a href="https://docs.angularjs.org/guide">docs.angularjs.org/guide</a></dt>
        <dd>Entwicklerhandbuch, führt in die Konzepte von AngularJS ein.</dd>
        <dt><a href="https://docs.angularjs.org/api">docs.angularjs.org/api</a></dt>
        <dd>API- Referenz</dd>
        <dt><a href="http://www.w3schools.com/angular/default.asp">w3schools.com</a></dt>
        <dd>Sehr gutes Tutorial</dd>
        <dt><a href="http://www.heise.de/developer/artikel/Single-Page-Applications-mit-AngularJS-Teil-1-Erste-Schritte-2181167.html">SPA mit angularjs, teil 1</a></dt>
        <dd>Artikelreihe auf heise.de von Mafred Steyer</dd>
    </dl>
    <p>
        AngularJS ist eine von Google bereitgestellt freie Bibliothek, welche für die Entwicklung von CRUD- Anwednungen (Create - Read - Update - Delete)
        optimiert wurde. Sie folgt dem MVC- Muster, wobei die View durch direkt als HTML- Formular mit speziellen Datenbindungsausdrücken implementiert wird.
    </p>
    <div class="row">
        <article class="col-xs-12 col-md-6 col-lg-8">
            <h3>MVC: Model View Controller</h3>

            <figure>
                <img src="~/Content/pics/MVCAngularJS/BasicMVCStruct.svg" class="img-responsive" />

                <figcaption>
                    Blockschaltbild <i>Angular JS Model View Controler</i>. Details siehe unter
                    <a href="https://docs.angularjs.org/guide/databinding" target="_blank">Databinding</a>,
                    <a href="https://docs.angularjs.org/guide/scope" target="_blank">Scope/Model</a>,
                    <a href="https://docs.angularjs.org/guide/expression" target="_blank">Expressions</a>,
                    <a href="https://docs.angularjs.org/guide/directive" target="_blank">Directives</a>,
                    <a href="https://docs.angularjs.org/guide/controller" target="_blank">Controler</a>
                </figcaption>
            </figure>

        </article>

        @*
            Die Daten unterhalb des mit ng-controller markierten Elements werden mit dem Scope synchronisiert,
            welcher durch den in der ng-controller Direktive genannten Controller verwaltet wird.
        *@
        <div class="panel panel-primary col-xs-12 col-md-6 col-lg-4" ng-controller="MyCalcCtrl" ng-init="A=3.14; B=-2.72;">
            <div class="panel-heading">
                Taschenrechner gemäß MVC Pattern mittels AngularJS
            </div>
            <div class="panel-body ">
                @*
                    HTML- Validierungen durch den Browser abschalten: werden von AngularJS übernommen
                *@
                <form novalidate>
                    <p class="well">
                        @* Angular- Expression. Wird beim Laden kompiliert in eine two way binding *@
                        {{Res.toFixed(0+Accuracy) | currency }}
                    </p>
                    <p>
                        @*
                            Bindung der Scope- Eigenschaft Accuracy an ein Radiobutton über ng-model Direktive
                        *@
                        Genauigkeit:
                        <label class="radio-inline"><input type="radio" name="Accur" value="2" ng-model="Accuracy" />2</label>
                        <label class="radio-inline"><input type="radio" name="Accur" value="4" ng-model="Accuracy" />4</label>
                    </p>
                    <p>
                        <div class="form-group">
                            <label for="A">A=</label>
                            <input type="text" ng-model="A" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label for="B">B=</label>
                            <input type="text" ng-model="B" class="form-control" />
                        </div>
                    </p>
                    <p>

                        @*
                            Bindung von Events an Eventhandler mittels ng-click Direktive
                        *@
                        <button ng-click="Add()" class="btn btn-primary"><span class="glyphicon glyphicon-plus"></span></button>
                        <button ng-click="Sub()" class="btn btn-primary"><span class="glyphicon glyphicon-minus"></span></button>
                        <button ng-click="Mul()" class="btn btn-primary"><span class="glyphicon glyphicon-asterisk"></span></button>
                        <button ng-click="Div()" class="btn btn-primary"><span class="glyphicon glyphicon-th"></span></button>
                        <button ng-click="Clear()" class="btn btn-primary"><span class="glyphicon glyphicon-scissors"></span></button>
                        <button ng-click="GetHistory()" class="btn btn-primary">GetHistory</button>

                    </p>
                </form>
            </div>
            <table class="table table-striped">
                @*
                    Die ng-repeat Direktive kann  als eine for...in Schleife betrachtet werden. Aus der Eigenschaft
                    Protokoll, die eine Collection darstellt, werden alle Einträge gelesen. Jeder eintrag wird über
                    rop verfügbar. Es wird eine neue Tabellenzeile im Dom eingefügt, deren Spalten Werte haben,
                    die durch Auflösung der Angular- Expressions {{...}} bestimmt wurden.

                *@
                <tr ng-repeat="rop in Protokoll">
                    <td>
                        {{rop.Res}}
                    </td>
                    <td>
                        =
                    </td>
                    <td>
                        {{rop.A}}
                    </td>
                    <td>
                        {{rop.OP}}
                    </td>
                    <td>
                        {{rop.B}}
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div class="row">
        <article class="col-md-12">
            <h3>Modularität und Dependency Injection</h3>

            Eine <b>AngularJS</b> gliedert sich in Module, die 
            <ol>
                <li><i>Dienste</i> (<i>Services</i>), die teilweise die Rolle von Unterprogrammen haben</li>
                <li>einen <i>Controller</i> für einen View</li>
                <li><i>Filter</i>, durch welche das Ergebnis von <i>Expressions</i> bei der Ausgabe formatiert wird</li>
                <li><i>Direktiven</i></li>
            </ol>
            <figure>
                <img src="~/Content/pics/MVCAngularJS/AngularJS.svg" class="img-responsive">
            </figure>
        </article>

    </div>
</div>

@* Bennanter Abschnitt, der im Fuss der Layoutseite eingeblendet wird, und die Skripte enthält *@
@section Scripts {
    @Scripts.Render("~/bundles/AngularJS")
    @Scripts.Render("~/Scripts/JavaScriptLernen/MVC/MVCAngularJsCalculator.js")


}


